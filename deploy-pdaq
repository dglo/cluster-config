#!/usr/bin/env bash

DEPLOYMENT=$1

if [ -z "$DEPLOYMENT" ]; then
   echo "Usage: $0 <deployment-name>"
   echo "   E.g. $0 sps-sim-config"
   exit
fi

#echo "Launching deployment for $DEPLOYMENT."

SCRIPT_DIR=$(dirname $(readlink -f $0))
REL_PATH_TO_WS=".."
WS_DIR=$(cd $SCRIPT_DIR/$REL_PATH_TO_WS; pwd)
RSYNC_FLAGS="-azv"
CFG_FILE="$WS_DIR/cluster-config/target/generated-resources/xml/xslt/${DEPLOYMENT}.xml"
if [ ! -f $CFG_FILE ]; then
   echo "Could not find ${CFG_FILE}!  Sorry..."
   exit
fi
source $CFG_FILE

echo "**********************************************"
echo " Running: $0"
echo "   for cluster: $CLUSTER"
echo "**********************************************"

####################### Parallelizing stuff #####################

fileKey="deploy"
function atexit () {  # Trick borrowed from Arthur - clean up tmp files
    rm -f /tmp/${fileKey}.$$.*;
}
trap atexit EXIT

function waitpids() {
   for pid in $1; do
      wait ${pid}
   done
}

function showResults() {
   for n in $@; do
      cat /tmp/${fileKey}.$$.$n
   done
}

#################################################################

for node in ${NODES}; do
  echo "Starting rsync on $node..."
  rsync_repo_cmd="rsync ${RSYNC_FLAGS} ${HOME}/.m2 ${node}:"
  rsync_ws_cmd="rsync ${RSYNC_FLAGS} ${WS_DIR} ${node}:"
  (echo $rsync_repo_cmd; eval $rsync_repo_cmd; echo $rsync_ws_cmd; eval $rsync_ws_cmd) 2>&1 > /tmp/${fileKey}.$$.$node &
  pids="$pids $!"
  #eval $rsync_repo_cmd
  #eval $rsync_ws_cmd
done

waitpids $pids

showResults ${NODES}
