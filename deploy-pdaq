#!/usr/bin/env bash

SCRIPT_DIR=$(dirname $(readlink -f $0))
REL_PATH_TO_WS=".."
WS_DIR=$(cd $SCRIPT_DIR/$REL_PATH_TO_WS; pwd)
CLUSTER=$(uname -n | sed 's/\(sp.*s.*\)-\(.*\)/\1/')
RSYNC_FLAGS="-azv"

echo "**********************************************"
echo " Running: $0"
echo "   for cluster: $CLUSTER"
echo "**********************************************"

case $CLUSTER in
  sps)
    NODES="sps-expcont sps-dbs sps-evbuilder sps-gtrigger sps-iitrigger sps-2ndbuild sps-ichub21 sps-ichub29 sps-ichub30 sps-ichub39"
    ;;
  spts64)
    NODES="spts64-expcont spts64-evbuilder spts64-stringproc01 sps-ichub21 sps-ichub29"
    ;;
  spts)
    NODES="spts-expcont spts-evbuilder spts-stringproc01 spts-ichub21 spts-ichub29"
    ;;
  splts)
    NODES="splts-expcont splts-evbuilder splts-stringproc01 splts-ichub21 splts-ichub29"
    ;;
  *)
    NODES=""  # would be localhost but we don't deploy in this case.
    ;;
esac

####################### Parallelizing stuff #####################

fileKey="deploy"
function atexit () {  # Trick borrowed from Arthur - clean up tmp files
    rm -f /tmp/${fileKey}.$$.*;
}
trap atexit EXIT

function waitpids() {
   for pid in $1; do
      wait ${pid}
   done
}

function showResults() {
   for n in $@; do
      cat /tmp/${fileKey}.$$.$n
   done
}

#################################################################

for node in ${NODES}; do
  echo "Starting rsync on $node..."
  rsync_repo_cmd="rsync ${RSYNC_FLAGS} ${HOME}/.m2 ${node}:"
  rsync_ws_cmd="rsync ${RSYNC_FLAGS} ${WS_DIR} ${node}:"
  (echo $rsync_repo_cmd; eval $rsync_repo_cmd; echo $rsync_ws_cmd; eval $rsync_ws_cmd) 2>&1 > /tmp/${fileKey}.$$.$node &
  pids="$pids $!"
  #eval $rsync_repo_cmd
  #eval $rsync_ws_cmd
done

waitpids $pids

showResults ${NODES}
